# core/ui/translations.py
from core.config import get_config


TRANSLATIONS = {
    "en": {
        "welcome_message": "Welcome to GPT Pilot!",
        "project_name_question": "What is the project name?",
        "choose_project_name": "Please choose a project name",
        "shorter_project_name": "Please choose a shorter project name",
        "llm_api_unreachable": "Pythagora cannot start because the LLM API is not reachable.",
        "api_check_failed": "API check for {provider} {model} failed.",
        "api_check_failed_with_error": "API check for {provider} {model} failed with: {error}",
        "stopping_pythagora_api_error": "Stopping Pythagora due to an error while calling the LLM API: {error}",
        "stopping_pythagora_error": "Stopping Pythagora due to error:\n\n{error}",
        "interrupted_by_user": "Interrupted by user",
        "experimental_feature_warning": "This is experimental feature and is currently limited to projects with size up to {max_lines} lines of code.",
        "copy_files_instruction": "Please copy your project files to {project_root} and press Continue",
        "project_size_warning": "WARNING: Your project ({loc} LOC) is larger than supported and may cause issues in Pythagora.",
        "inspecting_files": "Inspecting most important project files ...",
        "analyzing_project": "Analyzing project ...",
        "config_help": "Path to the configuration file",
        "show_config_help": "Output the default configuration to stdout",
        "level_help": "Log level (debug,info,warning,error,critical)",
        "database_help": "Database URL",
        "local_ipc_port_help": "Local IPC port to connect to",
        "local_ipc_host_help": "Local IPC host to connect to",
        "list_help": "List all projects",
        "list_json_help": "List all projects in JSON format",
        "project_help": "Load a specific project",
        "branch_help": "Load a specific branch",
        "step_help": "Load a specific step in a project/branch",
        "delete_help": "Delete a specific project",
        "llm_endpoint_help": "Use specific API endpoint for the given provider",
        "llm_key_help": "Use specific LLM key for the given provider",
        "import_v0_help": "Import data from a v0 (gpt-pilot) database with the given path",
        "email_help": "User's email address",
        "extension_version_help": "Version of the VSCode extension",
        "no_check_help": "Disable initial LLM API check",
        "invalid_llm_endpoint_format": "Invalid LLM endpoint format; expected 'provider:url'",
        "invalid_llm_endpoint_url": "Invalid LLM endpoint URL: {url}",
        "invalid_llm_key_format": "Invalid LLM endpoint format; expected 'provider:key'",
        "available_projects": "Available projects ({count}):",
        "branch_info": "  - {name} ({id}) - last step: {last_step}",
        "latest_step": "Latest step",
        "step": "Step",
        "branch_not_found": "Branch {branch_id}{step_txt} not found; use --list to list all projects",
        "project_not_found": "Project {project_id}{step_txt} not found; use --list to list all projects",
        "starting_orchestrator": "Starting Orchestrator",
        "running_multiple_agents": "Running agents {agents} (step {step})",
        "running_agent": "Running agent {agent} (step {step})",
        "agent_requested_exit": "Agent {agent} requested exit",
        "checking_offline_changes": "Checking for offline changes.",
        "empty_workspace_detected": "Detected empty workspace, restoring state from the database.",
        "found_modified_files": "We found {count} new and/or modified files.",
        "keep_changes_hint": "If you would like Pythagora to import those changes, click 'Yes'.\nClicking 'No' means Pythagora will restore (overwrite) all files to the last stored state.",
        "keep_changes_question": "Would you like to keep your changes?",
        "yes_keep_changes": "Yes, keep my changes",
        "no_restore_state": "No, restore last Pythagora state",
        "importing_offline_changes": "Importing offline changes into Pythagora.",
        "restoring_last_state": "Restoring last stored state.",
        "offline_changes_check_done": "Offline changes check done.",
        "unhandled_parallel_agent_type": "Unhandled parallel agent type: {agent_type}",
        "agent_done_log": "Agent {agent} is done, committing state for step {step}: {finished_epics}/{total_epics} epics, {finished_tasks}/{total_tasks} tasks, {finished_iterations}/{total_iterations} iterations, {finished_steps}/{total_steps} dev steps.",
        "files_missing_descriptions": "Some files are missing descriptions: {files}, requesting analysis",
        "current_task_status": "Status of current task: {status}",
        "unknown_step_type": "Unknown step type: {step_type}",
        "imported_files": "Imported new/changed files to project: {files}",
        "removed_files": "Removed files from project: {files}",
        "committing_imported_files": "Committing imported/removed files as a separate step {step}",
        "spec_writer_display_name": "Spec Writer",
        "describe_app_question": "Describe your app in as much detail as possible",
        "start_example_project": "Start an example project",
        "import_existing_project": "Import an existing project",
        "no_project_description": "No project description",
        "spec_step_name": "Create specification",
        "updating_project_spec": "Making the following changes to project specification:\n\n{feature_description}\n\nUpdated project specification:",
        "checking_prompt_complexity": "Checking the complexity of the prompt ...",
        "starting_example_project": "Starting example project with description:\n\n{description}",
        "short_description_message": "Your project description seems a bit short. The better you can describe the project, the better GPT Pilot will understand what you'd like to build.\n\nHere are some tips on how to better describe the project: {url}\n\nLet's start by refining your project idea:",
        "proceed_with_description": "Can we proceed with this project description? If so, just press Continue. Otherwise, please tell me what's missing or what you'd like to add.",
        "continue_button": "Continue",
        "skip_questions_button": "Skip questions",
        "enough_clarification": "This is enough clarification, you have all the information. Please output the spec now, without additional comments or questions.",
        "additional_info_examples": "Additional info/examples:",
        "tech_lead_display_name": "Tech Lead",
        "new_feature_complete": "Your new feature is complete!",
        "app_done": "Your app is DONE! You can start using it right now!",
        "asking_for_new_feature": "Asking for new feature",
        "new_feature_question": "Do you have a new feature to add to the project? Just write it here:",
        "no_more_features": "No, I'm done",
        "thanks_for_using": "Thanks for using Pythagora!",
        "creating_development_plan": "Creating the development plan ...",
        "epic_number_description": "Epic {number}: {description}",
        "creating_tasks_for_epic": "Creating tasks for this epic ...",
        "planning_example_project": "Planning example project: {name}",
        "tech_writer_display_name": "Technical Writer",
        "create_readme_action": "Create README.md",
        "no_tasks_found": "No tasks found in the project",
        "congratulations_message": "CONGRATULATIONS! You reached {pct_finished}% of your project generation!",
        "project_stats": "For now, you have created {n_files} files with a total of {n_lines} lines of code.",
        "creating_documentation": "Before continuing, Pythagora will create some documentation for the project...",
        "creating_readme": "Creating README ...",
        "troubleshooter_display_name": "Troubleshooter",
        "test_instructions_message": "Here are instructions on how to test the app:",
        "figuring_out_run_command": "Figuring out how to run the app ...",
        "determining_test_instructions": "Determining how to test the app ...",
        "check_app_working": "Please check if the app is working",
        "working_description_hint": "Here is a description of what should be working:",
        "everything_works": "Everything works",
        "want_to_make_change": "I want to make a change",
        "there_is_issue": "There is an issue",
        "describe_change_request": "Please describe the change you want to make to the project specification (one at a time)",
        "describe_issue_and_logs": "Please describe the issue you found (one at a time) and share any relevant server logs",
        "copy_server_logs_button": "Copy Server Logs",
        "architect_display_name": "Architect",
        "selecting_starter_templates": "Selecting starter templates ...",
        "use_template_question": "Do you want to use the '{template_name}' template?",
        "yes": "Yes",
        "no": "No",
        "template_usage_hint": "Project templates are here to speed up start of your app development and save tokens and time.\nChoose 'Yes' to use suggested template for your app.\nIf you choose 'No', project will be created from scratch.",
        "planning_project_architecture": "Planning project architecture ...",
        "picking_technologies": "Picking technologies to use ...",
        "warning_unsupported_dependencies": "Warning: Pythagora doesn't officially support {dependencies}. You can try to use {'it' if len(dependencies.split(',')) == 1 else 'them'}, but you may run into problems.",
        "warning_frontend_frameworks": "Warning: Pythagora works best with vanilla JavaScript. You can try to use {frameworks}, but you may run into problems. Visit {url} for more information.",
        "checking_dependency_availability": "Checking if {dependency} is available ...",
        "install_dependency_locally": "Please install it before proceeding with your app.",
        "install_dependency_optional": "If you would like to use it locally, please install it before proceeding.",
        "dependency_not_available": "❌ {dependency} is not available. {remedy}",
        "dependency_installed": "I've installed {dependency}",
        "dependency_available": "✅ {dependency} is available.",
        "what_do_you_want_to_do": "What do you want to do?",
        "i_have_a_question": "I have a question",
        "i_fixed_the_bug_myself": "I fixed the bug myself",
        "tell_me_more_about_the_bug": "Tell me more about the bug",
        "i_think_i_know_where_the_problem_is": "I think I know where the problem is",
        "other": "Other",
        "testing_instructions": "Instructions for testing:",
        "what_would_you_like_to_know": "What would you like to know?",
        "let_me_know_what_you_think": "Let me know what you think...",
        "how_to_solve_bug": "How do you think we can solve this bug?",
        "can_i_implement_solution": "Can I implement this solution?",
        "what_did_i_misunderstand": "Oh, my bad. What did I misunderstand?",
        "code_monkey_display_name": "Code Monkey",
        "reworking": "reworking",
        "updating": "updating",
        "creating": "creating",
        "reviewing": "reviewing",
        "done": "done",
        "empty_file": "Empty file",
        "developer_display_name": "Developer",
        "breaking_down_task": "Breaking down the task into steps ...",
        "thinking_about_implementation": "Thinking about how to implement this task ...",
        "edit_task": "Edit Task",
        "starting_new_task": "Starting new task with description:",
        "execute_task_question": "Do you want to execute the above task?",
        "skipping_task": "Skipping task...",
        "edit_task_description": "Edit the task description:",
        "command_output": "Command output",
        "executor_display_name": "Executor",
        "run_command_with_timeout": "Can I run command: {command} with {timeout}s timeout?",
        "run_command": "Can I run command: {command}?",
        "skipping_command": "Skipping command {command}",
        "human_input_display_name": "Human Input",
        "human_intervention_needed": "I need human intervention: {description}",
        "input_required_at": "Input required on {file}:{line}",
        "modify_file_instructions": "Please open {file} and modify line {line} according to the instructions.",
        "problem_solver_display_name": "Problem Solver",
        "solution_not_good": "That doesn't sound like a good idea, try something else.",
        "none_of_these": "None of these",
        "choose_solution": "Choose which solution would you like Pythagora to try next:",
        "please_choose_option": "Please choose one of available options",
        "provide_valid_input": "Please provide a valid input",
        "sending_stop_signal": "Sending signal to stop the App",
        "sending_close_diff_signal": "Sending signal to close the generated diff file",
        "sending_loading_finished_signal": "Sending project loading finished signal to the extension",
        "error_handler_display_name": "Error Handler",
        "external_docs_display_name": "Documentation",
        "determining_external_docs": "Determining if external documentation is needed for the next task...",
        "getting_relevant_documentation": "Getting relevant documentation for the following topics:",
        "legacy_handler_display_name": "Legacy Handler",
        "task_completer_display_name": "Pythagora",
    },
    "de": {
        "welcome_message": "Willkommen bei GPT Pilot!",
        "project_name_question": "Wie lautet der Projektname?",
        "choose_project_name": "Bitte wählen Sie einen Projektnamen",
        "shorter_project_name": "Bitte wählen Sie einen kürzeren Projektnamen",
        "llm_api_unreachable": "Pythagora kann nicht gestartet werden, da die LLM-API nicht erreichbar ist.",
        "api_check_failed": "API-Prüfung für {provider} {model} fehlgeschlagen.",
        "api_check_failed_with_error": "API-Prüfung für {provider} {model} fehlgeschlagen mit: {error}",
        "stopping_pythagora_api_error": "Pythagora wird aufgrund eines Fehlers beim Aufruf der LLM-API gestoppt: {error}",
        "stopping_pythagora_error": "Pythagora wird aufgrund eines Fehlers gestoppt:\n\n{error}",
        "interrupted_by_user": "Vom Benutzer unterbrochen",
        "experimental_feature_warning": "Dies ist eine experimentelle Funktion und ist derzeit auf Projekte mit bis zu {max_lines} Codezeilen beschränkt.",
        "copy_files_instruction": "Bitte kopieren Sie Ihre Projektdateien nach {project_root} und drücken Sie Fortfahren",
        "project_size_warning": "WARNUNG: Ihr Projekt ({loc} LOC) ist größer als unterstützt und könnte Probleme in Pythagora verursachen.",
        "inspecting_files": "Untersuche die wichtigsten Projektdateien ...",
        "analyzing_project": "Analysiere Projekt ...",
        "config_help": "Pfad zur Konfigurationsdatei",
        "show_config_help": "Ausgabe der Standardkonfiguration auf stdout",
        "level_help": "Log-Level (debug,info,warning,error,critical)",
        "database_help": "Datenbank-URL",
        "local_ipc_port_help": "Lokaler IPC-Port für die Verbindung",
        "local_ipc_host_help": "Lokaler IPC-Host für die Verbindung",
        "list_help": "Alle Projekte auflisten",
        "list_json_help": "Alle Projekte im JSON-Format auflisten",
        "project_help": "Ein bestimmtes Projekt laden",
        "branch_help": "Einen bestimmten Branch laden",
        "step_help": "Einen bestimmten Schritt in einem Projekt/Branch laden",
        "delete_help": "Ein bestimmtes Projekt löschen",
        "llm_endpoint_help": "Spezifischen API-Endpunkt für den angegebenen Provider verwenden",
        "llm_key_help": "Spezifischen LLM-Schlüssel für den angegebenen Provider verwenden",
        "import_v0_help": "Daten aus einer v0 (gpt-pilot) Datenbank mit dem angegebenen Pfad importieren",
        "email_help": "E-Mail-Adresse des Benutzers",
        "extension_version_help": "Version der VSCode-Erweiterung",
        "no_check_help": "Initiale LLM-API-Prüfung deaktivieren",
        "invalid_llm_endpoint_format": "Ungültiges LLM-Endpunkt-Format; erwartet 'provider:url'",
        "invalid_llm_endpoint_url": "Ungültige LLM-Endpunkt-URL: {url}",
        "invalid_llm_key_format": "Ungültiges LLM-Schlüssel-Format; erwartet 'provider:key'",
        "available_projects": "Verfügbare Projekte ({count}):",
        "branch_info": "  - {name} ({id}) - letzter Schritt: {last_step}",
        "latest_step": "Letzter Schritt",
        "step": "Schritt",
        "branch_not_found": "Branch {branch_id}{step_txt} nicht gefunden; verwenden Sie --list, um alle Projekte aufzulisten",
        "project_not_found": "Projekt {project_id}{step_txt} nicht gefunden; verwenden Sie --list, um alle Projekte aufzulisten",
        "starting_orchestrator": "Orchestrator wird gestartet",
        "running_multiple_agents": "Führe Agenten {agents} aus (Schritt {step})",
        "running_agent": "Führe Agent {agent} aus (Schritt {step})",
        "agent_requested_exit": "Agent {agent} hat Beenden angefordert",
        "checking_offline_changes": "Prüfe auf Offline-Änderungen.",
        "empty_workspace_detected": "Leerer Arbeitsbereich erkannt, stelle Zustand aus der Datenbank wieder her.",
        "found_modified_files": "Wir haben {count} neue und/oder geänderte Dateien gefunden.",
        "keep_changes_hint": "Wenn Sie möchten, dass Pythagora diese Änderungen importiert, klicken Sie auf 'Ja'.\nWenn Sie auf 'Nein' klicken, wird Pythagora alle Dateien auf den letzten gespeicherten Zustand zurücksetzen (überschreiben).",
        "keep_changes_question": "Möchten Sie Ihre Änderungen behalten?",
        "yes_keep_changes": "Ja, meine Änderungen behalten",
        "no_restore_state": "Nein, letzten Pythagora-Zustand wiederherstellen",
        "importing_offline_changes": "Importiere Offline-Änderungen in Pythagora.",
        "restoring_last_state": "Stelle letzten gespeicherten Zustand wieder her.",
        "offline_changes_check_done": "Prüfung auf Offline-Änderungen abgeschlossen.",
        "unhandled_parallel_agent_type": "Nicht behandelter paralleler Agententyp: {agent_type}",
        "agent_done_log": "Agent {agent} ist fertig, speichere Zustand für Schritt {step}: {finished_epics}/{total_epics} Epics, {finished_tasks}/{total_tasks} Aufgaben, {finished_iterations}/{total_iterations} Iterationen, {finished_steps}/{total_steps} Entwicklungsschritte.",
        "files_missing_descriptions": "Einigen Dateien fehlen Beschreibungen: {files}, fordere Analyse an",
        "current_task_status": "Status der aktuellen Aufgabe: {status}",
        "unknown_step_type": "Unbekannter Schritttyp: {step_type}",
        "imported_files": "Neue/geänderte Dateien zum Projekt importiert: {files}",
        "removed_files": "Dateien aus dem Projekt entfernt: {files}",
        "committing_imported_files": "Speichere importierte/entfernte Dateien als separaten Schritt {step}",
        "spec_writer_display_name": "Spezifikationsschreiber",
        "describe_app_question": "Beschreiben Sie Ihre App so detailliert wie möglich",
        "start_example_project": "Ein Beispielprojekt starten",
        "import_existing_project": "Ein bestehendes Projekt importieren",
        "no_project_description": "Keine Projektbeschreibung",
        "spec_step_name": "Spezifikation erstellen",
        "updating_project_spec": "Folgende Änderungen werden an der Projektspezifikation vorgenommen:\n\n{feature_description}\n\nAktualisierte Projektspezifikation:",
        "checking_prompt_complexity": "Überprüfe die Komplexität der Eingabe ...",
        "starting_example_project": "Starte Beispielprojekt mit folgender Beschreibung:\n\n{description}",
        "short_description_message": "Ihre Projektbeschreibung scheint etwas kurz zu sein. Je besser Sie das Projekt beschreiben können, desto besser wird GPT Pilot verstehen, was Sie bauen möchten.\n\nHier sind einige Tipps, wie Sie das Projekt besser beschreiben können: {url}\n\nLassen Sie uns damit beginnen, Ihre Projektidee zu verfeinern:",
        "proceed_with_description": "Können wir mit dieser Projektbeschreibung fortfahren? Wenn ja, drücken Sie einfach auf Fortfahren. Andernfalls teilen Sie uns bitte mit, was fehlt oder was Sie hinzufügen möchten.",
        "continue_button": "Fortfahren",
        "skip_questions_button": "Fragen überspringen",
        "enough_clarification": "Das ist genug Klärung, Sie haben alle Informationen. Bitte geben Sie jetzt die Spezifikation aus, ohne zusätzliche Kommentare oder Fragen.",
        "additional_info_examples": "Zusätzliche Informationen/Beispiele:",
        "tech_lead_display_name": "Technischer Leiter",
        "new_feature_complete": "Ihr neues Feature ist fertig!",
        "app_done": "Ihre App ist FERTIG! Sie können sie jetzt benutzen!",
        "asking_for_new_feature": "Frage nach neuem Feature",
        "new_feature_question": "Haben Sie ein neues Feature, das Sie zum Projekt hinzufügen möchten? Beschreiben Sie es einfach hier:",
        "no_more_features": "Nein, ich bin fertig",
        "thanks_for_using": "Danke, dass Sie Pythagora benutzt haben!",
        "creating_development_plan": "Erstelle den Entwicklungsplan ...",
        "epic_number_description": "Epic {number}: {description}",
        "creating_tasks_for_epic": "Erstelle Aufgaben für dieses Epic ...",
        "planning_example_project": "Plane Beispielprojekt: {name}",
        "tech_writer_display_name": "Technischer Schreiber",
        "create_readme_action": "README.md erstellen",
        "no_tasks_found": "Keine Aufgaben im Projekt gefunden",
        "congratulations_message": "GLÜCKWUNSCH! Sie haben {pct_finished}% Ihres Projekts generiert!",
        "project_stats": "Bisher haben Sie {n_files} Dateien mit insgesamt {n_lines} Codezeilen erstellt.",
        "creating_documentation": "Bevor wir fortfahren, wird Pythagora einige Dokumentationen für das Projekt erstellen...",
        "creating_readme": "README wird erstellt ...",
        "troubleshooter_display_name": "Fehlerbeheber",
        "test_instructions_message": "Hier sind Anweisungen zum Testen der App:",
        "figuring_out_run_command": "Ermittle, wie die App ausgeführt werden soll ...",
        "determining_test_instructions": "Bestimme, wie die App getestet werden soll ...",
        "check_app_working": "Bitte überprüfen Sie, ob die App funktioniert",
        "working_description_hint": "Hier ist eine Beschreibung dessen, was funktionieren sollte:",
        "everything_works": "Alles funktioniert",
        "want_to_make_change": "Ich möchte eine Änderung vornehmen",
        "there_is_issue": "Es gibt ein Problem",
        "describe_change_request": "Bitte beschreiben Sie die Änderung, die Sie an der Projektspezifikation vornehmen möchten (eine nach der anderen)",
        "describe_issue_and_logs": "Bitte beschreiben Sie das gefundene Problem (eines nach dem anderen) und teilen Sie alle relevanten Server-Logs",
        "copy_server_logs_button": "Server-Logs kopieren",
        "architect_display_name": "Architekt",
        "selecting_starter_templates": "Wähle Starter-Templates aus ...",
        "use_template_question": "Möchten Sie das '{template_name}' Template verwenden?",
        "yes": "Ja",
        "no": "Nein",
        "template_usage_hint": "Projekt-Templates sind dazu da, den Start Ihrer App-Entwicklung zu beschleunigen und Token und Zeit zu sparen.\nWählen Sie 'Ja', um das vorgeschlagene Template für Ihre App zu verwenden.\nWenn Sie 'Nein' wählen, wird das Projekt von Grund auf erstellt.",
        "planning_project_architecture": "Plane die Projektarchitektur ...",
        "picking_technologies": "Wähle die zu verwendenden Technologien aus ...",
        "warning_unsupported_dependencies": "Warnung: Pythagora unterstützt {dependencies} nicht offiziell. Sie können versuchen, {'es' if len(dependencies.split(',')) == 1 else 'sie'} zu verwenden, könnten aber auf Probleme stoßen.",
        "warning_frontend_frameworks": "Warnung: Pythagora funktioniert am besten mit Vanilla JavaScript. Sie können versuchen, {frameworks} zu verwenden, könnten aber auf Probleme stoßen. Besuchen Sie {url} für weitere Informationen.",
        "checking_dependency_availability": "Überprüfe, ob {dependency} verfügbar ist ...",
        "install_dependency_locally": "Bitte installieren Sie es, bevor Sie mit Ihrer App fortfahren.",
        "install_dependency_optional": "Wenn Sie es lokal verwenden möchten, installieren Sie es bitte, bevor Sie fortfahren.",
        "dependency_not_available": "❌ {dependency} ist nicht verfügbar. {remedy}",
        "dependency_installed": "Ich habe {dependency} installiert",
        "dependency_available": "✅ {dependency} ist verfügbar.",
        "what_do_you_want_to_do": "Was möchten Sie tun?",
        "i_have_a_question": "Ich habe eine Frage",
        "i_fixed_the_bug_myself": "Ich habe den Fehler selbst behoben",
        "tell_me_more_about_the_bug": "Erzählen Sie mir mehr über den Fehler",
        "i_think_i_know_where_the_problem_is": "Ich denke, ich weiß, wo das Problem liegt",
        "other": "Sonstiges",
        "testing_instructions": "Anweisungen zum Testen:",
        "what_would_you_like_to_know": "Was möchten Sie wissen?",
        "let_me_know_what_you_think": "Lassen Sie mich wissen, was Sie denken...",
        "how_to_solve_bug": "Wie denken Sie, können wir diesen Fehler beheben?",
        "can_i_implement_solution": "Kann ich diese Lösung implementieren?",
        "what_did_i_misunderstand": "Oh, mein Fehler. Was habe ich missverstanden?",
        "code_monkey_display_name": "Code-Affe",
        "reworking": "Überarbeitung",
        "updating": "Aktualisierung",
        "creating": "Erstellung",
        "reviewing": "Überprüfung",
        "done": "Fertig",
        "empty_file": "Leere Datei",
        "developer_display_name": "Entwickler",
        "breaking_down_task": "Die Aufgabe wird in Schritte unterteilt ...",
        "thinking_about_implementation": "Überlege, wie diese Aufgabe implementiert werden soll ...",
        "edit_task": "Aufgabe bearbeiten",
        "starting_new_task": "Starte neue Aufgabe mit folgender Beschreibung:",
        "execute_task_question": "Möchten Sie die oben genannte Aufgabe ausführen?",
        "skipping_task": "Überspringe Aufgabe...",
        "edit_task_description": "Bearbeiten Sie die Aufgabenbeschreibung:",
        "command_output": "Befehlsausgabe",
        "executor_display_name": "Ausführer",
        "run_command_with_timeout": "Kann ich den Befehl ausführen: {command} mit {timeout}s Zeitlimit?",
        "run_command": "Kann ich den Befehl ausführen: {command}?",
        "skipping_command": "Überspringe Befehl {command}",
        "human_input_display_name": "Benutzereingabe",
        "human_intervention_needed": "Ich benötige menschliches Eingreifen: {description}",
        "input_required_at": "Eingabe erforderlich in {file}:{line}",
        "modify_file_instructions": "Bitte öffnen Sie {file} und modifizieren Sie Zeile {line} gemäß den Anweisungen.",
        "problem_solver_display_name": "Problemlöser",
        "solution_not_good": "Das klingt nicht nach einer guten Idee, versuchen Sie etwas anderes.",
        "none_of_these": "Keine davon",
        "choose_solution": "Wählen Sie, welche Lösung Pythagora als nächstes versuchen soll:",
        "please_choose_option": "Bitte wählen Sie eine der verfügbaren Optionen",
        "provide_valid_input": "Bitte geben Sie eine gültige Eingabe ein",
        "sending_stop_signal": "Sende Signal zum Beenden der App",
        "sending_close_diff_signal": "Sende Signal zum Schließen der generierten Diff-Datei",
        "sending_loading_finished_signal": "Sende Signal zur Beendigung des Projekladevorgangs an die Erweiterung",
        "error_handler_display_name": "Fehlerbehandlung",
        "external_docs_display_name": "Dokumentation",
        "determining_external_docs": "Ermittle, ob externe Dokumentation für die nächste Aufgabe benötigt wird...",
        "getting_relevant_documentation": "Hole relevante Dokumentation für die folgenden Themen:",
        "legacy_handler_display_name": "Legacy-Handler",
        "task_completer_display_name": "Pythagora",
    }
}

def translate(key: str, **kwargs) -> str:
    config = get_config()
    lang = getattr(config, 'language', 'en')  # Fallback auf Englisch, wenn keine Sprache gesetzt ist
    if lang not in TRANSLATIONS:
        lang = 'de'  # Fallback auf Deutsch, wenn die konfigurierte Sprache nicht verfügbar ist
    if key not in TRANSLATIONS[lang]:
        return key  # Wenn kein Übersetzungsschlüssel gefunden wird, geben wir den Originaltext zurück
    translated = TRANSLATIONS[lang][key]
    return translated.format(**kwargs) if kwargs else translated
