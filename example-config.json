{
  // Konfiguration für die verwendbaren LLM-Anbieter. Pythagora unterstützt
  // OpenAI, Azure, Anthropic und Groq. OpenRouter und lokale LLMs (wie LM-Studio)
  // funktionieren ebenfalls, Sie können den "openai"-Anbieter verwenden, um diese zu definieren.
  "llm": {
    "openai": {
      // Basis-URL zum Anbieter/Server, ohne den abschließenden "chat/completions"-Teil.
      "base_url": null,
      "api_key": null,
      "connect_timeout": 60.0,
      "read_timeout": 20.0
    },
    // Beispielkonfiguration für Anthropic (siehe https://docs.anthropic.com/docs/api-reference)
    "anthropic": {
      "base_url": "https://api.anthropic.com",
      "api_key": "your-api-key",
      "connect_timeout": 60.0,
      "read_timeout": 20.0
    },
    // Beispielkonfiguration für Azure OpenAI (siehe https://learn.microsoft.com/en-us/azure/ai-services/openai/reference#chat-completions)
    "azure": {
      "base_url": "https://your-resource-name.openai.azure.com/",
      "api_key": "your-api-key",
      "connect_timeout": 60.0,
      "read_timeout": 20.0,
      "extra": {
        "azure_deployment": "your-azure-deployment-id",
        "api_version": "2024-02-01"
      }
    }
  },
  // Jeder Agent kann ein anderes Modell oder eine andere Konfiguration verwenden. Der Standard ist wie zuvor GPT4 Turbo
  // für die meisten Aufgaben und GPT3.5 Turbo zur Generierung von Dateibeschreibungen. Der Agent-Name hier sollte mit
  // dem Python-Klassennamen übereinstimmen.
  "agent": {
    "default": {
      "provider": "openai",
      "model": "gpt-4o-2024-05-13",
      "temperature": 0.5
    }
  },
  // Logging-Konfiguration gibt standardmäßig Debug-Log in "pythagora.log" aus. Wenn Sie dies auf null setzen,
  // wird das Log an stdout gesendet.
  "log": {
    "level": "DEBUG",
    "format": "%(asctime)s %(levelname)s [%(name)s] %(message)s",
    "output": "pythagora.log"
  },
  // Zu verwendende Datenbank. Pythagora verwendet asyncio, daher sollte eine asyncio-kompatible Datenbank-Engine angegeben werden.
  // Wenn "debug_sql" auf True gesetzt ist, werden alle SQL-Abfragen protokolliert.
  "db": {
    "url": "sqlite+aiosqlite:///pythagora.db",
    "debug_sql": false
  },
  "ui": {
    "type": "plain"
  },
  "fs": {
    "type": "local",
    // Stammverzeichnis des Arbeitsbereichs. Pythagora speichert standardmäßig alle Projekte in diesem Verzeichnis.
    "workspace_root": "workspace",
    // Verzeichnisse, Dateien und Muster, die bei der Untersuchung der Dateien im Projekt ignoriert werden sollen.
    // Beachten Sie, dass Pythagora bereits alle binären (nicht-text) Dateien standardmäßig ignoriert.
    "ignore_paths": [
      ".git",
      ".gpt-pilot",
      ".idea",
      ".vscode",
      ".next",
      ".DS_Store",
      "__pycache__",
      "site-packages",
      "node_modules",
      "package-lock.json",
      "venv",
      "dist",
      "build",
      "target",
      "*.min.js",
      "*.min.css",
      "*.svg",
      "*.csv",
      "*.log",
      "go.sum"
    ],
    // Dateien, die größer als 50 KB sind, werden ignoriert, auch wenn sie sonst nicht ignoriert würden.
    "ignore_size_threshold": 50000
  },
  // Telemetrie-Einstellungen
  "telemetry": {
    "enabled": false
  }
}
